{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","ReactDOM","render","document","querySelector"],"mappings":"gRAGaA,G,MAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACJC,IAAI,YACR,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,aCLjBC,G,MAAU,SAACR,GAAD,OACnB,qBAAKC,UAAU,YAAf,SACID,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJjBO,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,8BACI,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,QCkCzEG,G,8DAjCb,aAAe,IAAD,8BACZ,gBAWAH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAX1C,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAY,IAJF,E,gEAOQ,IAAD,OACfI,MAAM,8CACLC,MAAK,SAACC,GAAD,OAAaA,EAASC,UAC3BF,MAAK,SAACG,GAAD,OAAU,EAAKT,SAAU,CAACT,SAAUkB,S,+BAMrC,IAAD,EACwBC,KAAKN,MAA9Bb,EADC,EACDA,SAAUU,EADT,EACSA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAChDA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAEhD,OACI,sBAAK9B,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CACAW,YAAa,kBACbC,aAAce,KAAKf,eAEnB,cAAC,EAAD,CAAUJ,SAAWoB,W,GA7BfI,cCDlBC,IAASC,OACL,cAAC,EAAD,IAEAC,SAASC,cAAc,Y","file":"static/js/main.0c7e0afe.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../card/card.style.css\";\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set3&size=180x300`}\r\n                alt=\"monster\" />\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList =(props)=>(\r\n    <div className=\"card-list\">\r\n       {props.monsters.map(monster =>(\r\n           <Card key={monster.id} monster={monster}/>\r\n       ))}\r\n    </div>\r\n)\r\n","import React from 'react';\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return (\r\n        <div >\r\n            <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n        </div>\r\n    )\r\n}","import React,{Component} from \"react\";\r\nimport { CardList } from \"./components/card-list/card-list.component\";\r\nimport {SearchBox} from  \"./components/search-box/search-box.component\";\r\nimport \"./App.css\";\r\nimport \"./index.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      monsters: [],\r\n      searchField:'',\r\n    };\r\n}\r\n    componentDidMount(){\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then((response)=>(response.json()))\r\n        .then((users)=> this.setState ({monsters: users}));\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({ searchField: e.target.value });\r\n      };\r\n\r\n    render(){\r\n    const {monsters, searchField} = this.state; \r\n    const filteredMonsters = monsters.filter(monster =>\r\n    monster.name.toLowerCase().includes(searchField.toLowerCase()));\r\n    \r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Monsters Rolodex</h1>\r\n            <SearchBox \r\n            placeholder= \"Search Monsters\"\r\n            handleChange={this.handleChange}\r\n            />\r\n            <CardList monsters= {filteredMonsters}/>\r\n        </div>\r\n    )\r\n}\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n    <App/>, \r\n   \r\n    document.querySelector('#root')\r\n)\r\n"],"sourceRoot":""}